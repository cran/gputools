gpuFastICA <-
function (X, n.comp, alg.typ = c("parallel","deflation"),
          fun = c("logcosh", "exp"),
          alpha = 1,
          row.norm = FALSE, maxit = 200, tol = 1e-04,
          verbose = FALSE, w.init=NULL)
{
	if("@HAS_CULA@" == "no") {
		stop("cula not found; gpuFastICA is disabled; use the fastICA package")
	}

    dd <- dim(X)
    d <- dd[dd != 1]
    if (length(d) != 2)
        stop("data must be matrix-conformal")
    X <- if (length(d) != length(dd))
        matrix(X, d[1], d[2])
    else as.matrix(X)

    if (alpha < 1 || alpha > 2)
        stop("alpha must be in range [1,2]")
    alg.typ <- match.arg(alg.typ)
    fun <- match.arg(fun)
    n <- nrow(X)
    p <- ncol(X)

    if (n.comp > min(n, p)) {
        message("'n.comp' is too large: reset to ", min(n, p))
        n.comp <- min(n, p)
    }
    if(is.null(w.init))
        w.init <- matrix(rnorm(n.comp^2),n.comp,n.comp)
    else {
        if(!is.matrix(w.init) || length(w.init) != (n.comp^2))
            stop("w.init is not a matrix or is the wrong size")
    }
	a <- .C("icainc_JM",
		as.single(X),
        as.single(w.init),
        as.integer(p),
        as.integer(n),
        as.integer(n.comp),
        as.single(alpha),
        as.integer(1),
        as.integer(row.norm),
        as.integer(1 + (fun == "exp")),
        as.integer(maxit),
        as.single(tol),
        as.integer(alg.typ != "parallel"),
        as.integer(verbose),
        X = single(p * n),
        K = single(n.comp * p),
        W = single(n.comp * n.comp),
        A = single(p * n.comp),
        S = single(n.comp * n),
		PACKAGE = 'gputools'
	)
	X1 <- t(matrix(a$X, p, n, byrow = TRUE))
	K <- t(matrix(a$K, n.comp, p, byrow = TRUE))
	W <- t(matrix(a$W, n.comp, n.comp, byrow = TRUE))
	A <- t(matrix(a$A, p, n.comp, byrow = TRUE))
	S <- t(matrix(a$S, n.comp, n, byrow = TRUE))
	return(list(X = X1, K = K, W = W, A = A, S = S))
}
